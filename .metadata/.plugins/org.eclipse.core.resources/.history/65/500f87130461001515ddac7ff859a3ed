import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

import javax.swing.JFrame;

public class IR_Main extends JFrame{

	
//	static String[] text = {"go","can","do","man","clock","ask"};
//	static String[] multi = {"s", "es"};
//	static String[] past = {"d", "ed"};
//	static String[] now = {"ing"};
//		
//	static String[][] matching = {text, multi, past, now};
	
	static String Input = null;
	static boolean success = false;
	static 	Set<Integer> rootSet = new HashSet<Integer>();
	static boolean mat = false;
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
//		new FileRead(rootSet);		
		FileRead();
		while(true) {
			Input = Scan();

			mat = rootSet.contains(Input.hashCode());
			if(mat == true) {
				System.out.println(Input);
			} else {
				find();
			}
		}
		
	}
	
	static void FileRead() {
						
			String FileName = "dictionary - make.txt";
			try {
				BufferedReader in = new BufferedReader(new FileReader(FileName));
				String s;

				while ((s = in.readLine()) != null) {
					rootSet.add(s.hashCode());
				}
				
				in.close();
			   
			} catch (IOException e) {
				System.err.println(e); // 에러가 있다면 메시지 출력
				System.exit(1);
			}
	}
	

	private static String Scan() {
		// TODO Auto-generated method stub
		String inputText;
		System.out.print("input : ");
		Scanner sc = new Scanner(System.in);
		inputText = sc.nextLine();
		return inputText;
	}
	
	private static void find() {
		for(int i=0;i<Input.length();i++) {
			String subString = Input.substring(0,Input.length()-i);
			String suffix = Input.substring(Input.length()-i, Input.length());
			mat = rootSet.contains(subString.hashCode());
			if(mat == true) {
				System.out.println(subString + " " + suffix);
				break;
			} else {
				if(suffix.equals("ing")) {
					find(subString, "ing", "e");
				} else if(suffix.equals("iful")) {
					find(subString, "ful", "y");
					break;
				}else if(suffix.equals("ying")) {
					find(subString, "ing", "ie");
					break;
				}else if(suffix.equals("ied")) {
					find(subString, "ed", "y");
				}
				else if(i == Input.length()-1) {
					System.out.println("없는 단어");
					break;
				}
			}
		}
	}
	
	private static void find(String text, String matching, String add) {
		mat = rootSet.contains((text + add).hashCode());
		if(mat == true) {
			System.out.println(text + add + " " + matching);
			return;
		}
	}
}
