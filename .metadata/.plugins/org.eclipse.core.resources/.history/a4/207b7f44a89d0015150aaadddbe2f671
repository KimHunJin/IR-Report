import java.io.EOFException;
import java.util.ArrayList;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;

public class Main {

	final static int TOTALFILENUMBER = 10;

	ArrayList<Double> arrTestDF = new ArrayList<>(); // DF값
	ArrayList<HashSet> arrHashSet = new ArrayList<>(); // hashSet으로 이루어진 리스트
	ArrayList<HashMap> arrHashMap = new ArrayList<>(); // hashMap으로 이루어진 리스트
	ArrayList<String> arrUrl = new ArrayList<>(); // url리스트
	HashSet<String> totalWordHashSet = new HashSet<>(); // 모든 단어가 저장 될 해시셋
	HashMap<String, Integer> totalWordHashMap = new HashMap<>(); // 모든 단어가 저장 될
																	// 해시맵
	String mURL = null;
	double random = 0.0;
	HtmlParsing htmlParsing = new HtmlParsing();
	SaveWord saveWordTest = new SaveWord();

	void addURL(String mURL) {
		arrUrl.add(mURL);
	}

	void loop() {
		mURL = htmlParsing.randomAddress();
		arrUrl.add(mURL);
		String document = htmlParsing.getText(mURL);
		new FileManagement().saveFile(mURL.substring(19, mURL.length()), document);
		String[] testSplit = new SplitWord().getSplit(document);
		saveWordTest.setHashSetWord(testSplit);
		saveWordTest.setTotalWord(testSplit);
		HashSet<String> hashSetTest = saveWordTest.getHashSetWord();
		HashMap<String, Integer> hashMapest = saveWordTest.getHashMapFrequence();
		arrHashSet.add(hashSetTest);
		arrHashMap.add(hashMapest);
	}

	void start() {

		for (int i = 0; i < TOTALFILENUMBER; i++) {
			loop();
		}
		totalWordHashMap = saveWordTest.getTotalHashMapWord();
		totalWordHashSet = saveWordTest.getTotalHashSetWord();
		// ArrayList<String> arr = new ArrayList<>(arrHashSet.get(0));
		// for (int i = 0; i < arr.size(); i++) {
		// System.out.println(arr.get(i) + " " +
		// arrHashMap.get(0).get(arr.get(i)));
		// }

		ArrayList<String> arr2 = new ArrayList<>(totalWordHashSet);
		for (String string : arr2) {
			if (string.equals("")) {
				continue;
			} else {
				System.out.println(string + "  " + totalWordHashMap.get(string));
			}
		}
		String testWord;
		boolean isCheck = true;
		do {

			System.out.print("질의어 입력 : ");
			Scanner sc = new Scanner(System.in);
			testWord = sc.nextLine();
			if (testWord.equals("q")) {
				isCheck = false;
				System.out.println("종료되었습니다.");
				break;
			}

			int mDF = 0;
			for (int i = 0; i < arrHashSet.size(); i++) {
				if (arrHashSet.get(i).contains(testWord)) {
					mDF++;
				}
			}
			for (int i = 0; i < arrHashMap.size(); i++) {
				if (arrHashMap.get(i).containsKey(testWord)) {
					double mTF = new Weight().getTF((int) arrHashMap.get(i).get(testWord));
					double mIDF = new Weight().getIDF(TOTALFILENUMBER, mDF);
					double mWeight = new Weight().getWeight(mTF, mIDF);
					System.out.println(
							"문서 " + i + " " + arrUrl.get(i) + " - " + testWord + " : " + arrHashMap.get(i).get(testWord)
									+ " TF : " + mTF + " IDF : " + mIDF + " Weight : " + mWeight);
				}
			}
			System.out.println(testWord + " :  DF : " + mDF);
		} while (isCheck);
	}

	public static void main(String[] args) {

		Main a = new Main();
		a.start();

	}
}
